// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"../app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListEvent returns an array of view: default.
func (m *EventGenresDB) ListEvent(ctx context.Context) []*app.Event {
	defer goa.MeasureSince([]string{"goa", "db", "event", "listevent"}, time.Now())

	var native []*EventGenres
	var objs []*app.Event
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing EventGenres", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.EventGenresToEvent())
	}

	return objs
}

// EventGenresToEvent loads a EventGenres and builds the default view of media type Event.
func (m *EventGenres) EventGenresToEvent() *app.Event {
	eventgenres := &app.Event{}

	return eventgenres
}

// OneEvent loads a EventGenres and builds the default view of media type Event.
func (m *EventGenresDB) OneEvent(ctx context.Context, id int) (*app.Event, error) {
	defer goa.MeasureSince([]string{"goa", "db", "event", "oneevent"}, time.Now())

	var native EventGenres
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting EventGenres", "error", err.Error())
		return nil, err
	}

	view := *native.EventGenresToEvent()
	return &view, err
}
