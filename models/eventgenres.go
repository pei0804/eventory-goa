// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"../app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// イベントジャンル
type event_genres struct {
	ID        int `gorm:"primary_key"` // primary key
	EventID   int
	GenreID   int
	CreatedAt time.Time  // timestamp
	DeletedAt *time.Time // nullable timestamp (soft delete)
	UpdatedAt time.Time  // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m event_genres) TableName() string {
	return "event_genres"

}

// event_genresDB is the implementation of the storage interface for
// event_genres.
type event_genresDB struct {
	Db *gorm.DB
}

// Newevent_genresDB creates a new storage type.
func Newevent_genresDB(db *gorm.DB) *event_genresDB {
	return &event_genresDB{Db: db}
}

// DB returns the underlying database.
func (m *event_genresDB) DB() interface{} {
	return m.Db
}

// event_genresStorage represents the storage interface.
type event_genresStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*event_genres, error)
	Get(ctx context.Context, id int) (*event_genres, error)
	Add(ctx context.Context, eventGenres *event_genres) error
	Update(ctx context.Context, eventGenres *event_genres) error
	Delete(ctx context.Context, id int) error

	ListEvent(ctx context.Context) []*app.Event
	OneEvent(ctx context.Context, id int) (*app.Event, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *event_genresDB) TableName() string {
	return "event_genres"

}

// CRUD Functions

// Get returns a single event_genres as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *event_genresDB) Get(ctx context.Context, id int) (*event_genres, error) {
	defer goa.MeasureSince([]string{"goa", "db", "eventGenres", "get"}, time.Now())

	var native event_genres
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of event_genres
func (m *event_genresDB) List(ctx context.Context) ([]*event_genres, error) {
	defer goa.MeasureSince([]string{"goa", "db", "eventGenres", "list"}, time.Now())

	var objs []*event_genres
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *event_genresDB) Add(ctx context.Context, model *event_genres) error {
	defer goa.MeasureSince([]string{"goa", "db", "eventGenres", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding event_genres", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *event_genresDB) Update(ctx context.Context, model *event_genres) error {
	defer goa.MeasureSince([]string{"goa", "db", "eventGenres", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating event_genres", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *event_genresDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "eventGenres", "delete"}, time.Now())

	var obj event_genres

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting event_genres", "error", err.Error())
		return err
	}

	return nil
}
