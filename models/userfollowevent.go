// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"time"

	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
)

// ユーザーのキープ状態
type UserFollowEvent struct {
	ID             int `gorm:"primary_key"` // primary key
	BatchProcessed bool
	EventID        int // Belongs To Event
	Status         string
	UserID         int        // Belongs To User
	CreatedAt      time.Time  // timestamp
	DeletedAt      *time.Time // nullable timestamp (soft delete)
	UpdatedAt      time.Time  // timestamp
	Event          Event
	User           User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m UserFollowEvent) TableName() string {
	return "user_follow_events"

}

// UserFollowEventDB is the implementation of the storage interface for
// UserFollowEvent.
type UserFollowEventDB struct {
	Db *gorm.DB
}

// NewUserFollowEventDB creates a new storage type.
func NewUserFollowEventDB(db *gorm.DB) *UserFollowEventDB {
	return &UserFollowEventDB{Db: db}
}

// DB returns the underlying database.
func (m *UserFollowEventDB) DB() interface{} {
	return m.Db
}

// UserFollowEventStorage represents the storage interface.
type UserFollowEventStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*UserFollowEvent, error)
	Get(ctx context.Context, id int) (*UserFollowEvent, error)
	Add(ctx context.Context, userfollowevent *UserFollowEvent) error
	Update(ctx context.Context, userfollowevent *UserFollowEvent) error
	Delete(ctx context.Context, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *UserFollowEventDB) TableName() string {
	return "user_follow_events"

}

// Belongs To Relationships

// UserFollowEventFilterByEvent is a gorm filter for a Belongs To relationship.
func UserFollowEventFilterByEvent(eventID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if eventID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("event_id = ?", eventID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// UserFollowEventFilterByUser is a gorm filter for a Belongs To relationship.
func UserFollowEventFilterByUser(userID int, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID > 0 {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)

		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single UserFollowEvent as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *UserFollowEventDB) Get(ctx context.Context, id int) (*UserFollowEvent, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowEvent", "get"}, time.Now())

	var native UserFollowEvent
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of UserFollowEvent
func (m *UserFollowEventDB) List(ctx context.Context) ([]*UserFollowEvent, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowEvent", "list"}, time.Now())

	var objs []*UserFollowEvent
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *UserFollowEventDB) Add(ctx context.Context, model *UserFollowEvent) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowEvent", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding UserFollowEvent", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *UserFollowEventDB) Update(ctx context.Context, model *UserFollowEvent) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowEvent", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating UserFollowEvent", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *UserFollowEventDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowEvent", "delete"}, time.Now())

	var obj UserFollowEvent

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting UserFollowEvent", "error", err.Error())
		return err
	}

	return nil
}
