// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"../app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListEvent returns an array of view: default.
func (m *EventsDB) ListEvent(ctx context.Context) []*app.Event {
	defer goa.MeasureSince([]string{"goa", "db", "event", "listevent"}, time.Now())

	var native []*Events
	var objs []*app.Event
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Events", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.EventsToEvent())
	}

	return objs
}

// EventsToEvent loads a Events and builds the default view of media type Event.
func (m *Events) EventsToEvent() *app.Event {
	events := &app.Event{}
	events.Accepte = m.Accepte
	events.Address = m.Address
	tmp1 := &m.EndAt
	events.EndAt = tmp1.EndAtToEndAt() // %!s(MISSING)
	events.Identifier = m.Identifier
	events.Limits = m.Limits
	tmp2 := &m.StartAt
	events.StartAt = tmp2.StartAtToStartAt() // %!s(MISSING)
	events.URL = m.URL
	events.Wait = m.Wait

	return events
}

// OneEvent loads a Events and builds the default view of media type Event.
func (m *EventsDB) OneEvent(ctx context.Context, id int) (*app.Event, error) {
	defer goa.MeasureSince([]string{"goa", "db", "event", "oneevent"}, time.Now())

	var native Events
	err := m.Db.Scopes().Table(m.TableName()).Preload("EventGenres").Preload("UserKeepStatus").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Events", "error", err.Error())
		return nil, err
	}

	view := *native.EventsToEvent()
	return &view, err
}
