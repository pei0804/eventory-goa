// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// ユーザーのフォロー都道府県
type user_follow_prefs struct {
	ID        int `gorm:"primary_key"` // primary key
	PrefID    int
	UserID    int
	CreatedAt time.Time  // timestamp
	DeletedAt *time.Time // nullable timestamp (soft delete)
	UpdatedAt time.Time  // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m user_follow_prefs) TableName() string {
	return "user_follow_prefs"

}

// user_follow_prefsDB is the implementation of the storage interface for
// user_follow_prefs.
type user_follow_prefsDB struct {
	Db *gorm.DB
}

// Newuser_follow_prefsDB creates a new storage type.
func Newuser_follow_prefsDB(db *gorm.DB) *user_follow_prefsDB {
	return &user_follow_prefsDB{Db: db}
}

// DB returns the underlying database.
func (m *user_follow_prefsDB) DB() interface{} {
	return m.Db
}

// user_follow_prefsStorage represents the storage interface.
type user_follow_prefsStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*user_follow_prefs, error)
	Get(ctx context.Context, id int) (*user_follow_prefs, error)
	Add(ctx context.Context, userFollowPrefs *user_follow_prefs) error
	Update(ctx context.Context, userFollowPrefs *user_follow_prefs) error
	Delete(ctx context.Context, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *user_follow_prefsDB) TableName() string {
	return "user_follow_prefs"

}

// CRUD Functions

// Get returns a single user_follow_prefs as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *user_follow_prefsDB) Get(ctx context.Context, id int) (*user_follow_prefs, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowPrefs", "get"}, time.Now())

	var native user_follow_prefs
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of user_follow_prefs
func (m *user_follow_prefsDB) List(ctx context.Context) ([]*user_follow_prefs, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowPrefs", "list"}, time.Now())

	var objs []*user_follow_prefs
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *user_follow_prefsDB) Add(ctx context.Context, model *user_follow_prefs) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowPrefs", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding user_follow_prefs", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *user_follow_prefsDB) Update(ctx context.Context, model *user_follow_prefs) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowPrefs", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating user_follow_prefs", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *user_follow_prefsDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "userFollowPrefs", "delete"}, time.Now())

	var obj user_follow_prefs

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting user_follow_prefs", "error", err.Error())
		return err
	}

	return nil
}
