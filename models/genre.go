// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"time"

	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/tikasan/eventory-goa/app"
	"golang.org/x/net/context"
)

// ジャンル
type Genre struct {
	ID               int          `gorm:"primary_key"` // primary key
	EventGenres      []EventGenre // has many EventGenres
	Keyword          string
	Name             string
	UserFollowGenres []UserFollowGenre // has many UserFollowGenres
	CreatedAt        time.Time         // timestamp
	DeletedAt        *time.Time        // nullable timestamp (soft delete)
	UpdatedAt        time.Time         // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Genre) TableName() string {
	return "genres"

}

// GenreDB is the implementation of the storage interface for
// Genre.
type GenreDB struct {
	Db *gorm.DB
}

// NewGenreDB creates a new storage type.
func NewGenreDB(db *gorm.DB) *GenreDB {
	return &GenreDB{Db: db}
}

// DB returns the underlying database.
func (m *GenreDB) DB() interface{} {
	return m.Db
}

// GenreStorage represents the storage interface.
type GenreStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Genre, error)
	Get(ctx context.Context, id int) (*Genre, error)
	Add(ctx context.Context, genre *Genre) error
	Update(ctx context.Context, genre *Genre) error
	Delete(ctx context.Context, id int) error

	ListGenre(ctx context.Context) []*app.Genre
	OneGenre(ctx context.Context, id int) (*app.Genre, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *GenreDB) TableName() string {
	return "genres"

}

// CRUD Functions

// Get returns a single Genre as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *GenreDB) Get(ctx context.Context, id int) (*Genre, error) {
	defer goa.MeasureSince([]string{"goa", "db", "genre", "get"}, time.Now())

	var native Genre
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Genre
func (m *GenreDB) List(ctx context.Context) ([]*Genre, error) {
	defer goa.MeasureSince([]string{"goa", "db", "genre", "list"}, time.Now())

	var objs []*Genre
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *GenreDB) Add(ctx context.Context, model *Genre) error {
	defer goa.MeasureSince([]string{"goa", "db", "genre", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Genre", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *GenreDB) Update(ctx context.Context, model *Genre) error {
	defer goa.MeasureSince([]string{"goa", "db", "genre", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Genre", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *GenreDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "genre", "delete"}, time.Now())

	var obj Genre

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Genre", "error", err.Error())
		return err
	}

	return nil
}
