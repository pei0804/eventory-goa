// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)/src/github.com/tikasan/eventory-goa
// --version=v1.1.0-dirty
//
// API "eventory": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"net/http"
	"strconv"
	"unicode/utf8"

	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// ListEventContext provides the event list action context.
type ListEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UpdatedAt string
}

// NewListEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller list action.
func NewListEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUpdatedAt := req.Params["updated_at"]
	if len(paramUpdatedAt) == 0 {
		rctx.UpdatedAt = ""
	} else {
		rawUpdatedAt := paramUpdatedAt[0]
		rctx.UpdatedAt = rawUpdatedAt
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEventContext) OK(r EventCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListEventContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateGenreContext provides the genre create action context.
type CreateGenreContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewCreateGenreContext parses the incoming request URL and body, performs validations and creates the
// context used by the genre controller create action.
func NewCreateGenreContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateGenreContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateGenreContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("name"))
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
		if utf8.RuneCountInString(rctx.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 1, true))
		}
		if utf8.RuneCountInString(rctx.Name) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`name`, rctx.Name, utf8.RuneCountInString(rctx.Name), 30, false))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateGenreContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateGenreContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListGenreContext provides the genre list action context.
type ListGenreContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Keyword string
}

// NewListGenreContext parses the incoming request URL and body, performs validations and creates the
// context used by the genre controller list action.
func NewListGenreContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListGenreContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListGenreContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramKeyword := req.Params["keyword"]
	if len(paramKeyword) == 0 {
		rctx.Keyword = ""
	} else {
		rawKeyword := paramKeyword[0]
		rctx.Keyword = rawKeyword
		if utf8.RuneCountInString(rctx.Keyword) < 0 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`keyword`, rctx.Keyword, utf8.RuneCountInString(rctx.Keyword), 0, true))
		}
		if utf8.RuneCountInString(rctx.Keyword) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`keyword`, rctx.Keyword, utf8.RuneCountInString(rctx.Keyword), 30, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListGenreContext) OK(r GenreCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.genre+json; type=collection")
	if r == nil {
		r = GenreCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListGenreContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// EventFavUpdateUserContext provides the user event fav update action context.
type EventFavUpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EventID int
	UserID  int
}

// NewEventFavUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller event fav update action.
func NewEventFavUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*EventFavUpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := EventFavUpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEventID := req.Params["eventID"]
	if len(paramEventID) > 0 {
		rawEventID := paramEventID[0]
		if eventID, err2 := strconv.Atoi(rawEventID); err2 == nil {
			rctx.EventID = eventID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("eventID", rawEventID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("userID"))
	} else {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *EventFavUpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *EventFavUpdateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *EventFavUpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GenreFavUpdateUserContext provides the user genre fav update action context.
type GenreFavUpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	GenreID int
	UserID  int
}

// NewGenreFavUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller genre fav update action.
func NewGenreFavUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GenreFavUpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GenreFavUpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGenreID := req.Params["genreID"]
	if len(paramGenreID) > 0 {
		rawGenreID := paramGenreID[0]
		if genreID, err2 := strconv.Atoi(rawGenreID); err2 == nil {
			rctx.GenreID = genreID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("genreID", rawGenreID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("userID"))
	} else {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GenreFavUpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GenreFavUpdateUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GenreFavUpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
