// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)/src/github.com/tikasan/eventory-goa
// --version=v1.1.0-dirty
//
// API "eventory": genre Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// CreateGenrePath computes a request path to the create action of genre.
func CreateGenrePath() string {

	return fmt.Sprintf("/api/v2/genre/new")
}

// ジャンルの新規作成
func (c *Client) CreateGenre(ctx context.Context, path string, name string) (*http.Response, error) {
	req, err := c.NewCreateGenreRequest(ctx, path, name)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateGenreRequest create the request corresponding to the create action endpoint of the genre resource.
func (c *Client) NewCreateGenreRequest(ctx context.Context, path string, name string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("name", name)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListGenrePath computes a request path to the list action of genre.
func ListGenrePath() string {

	return fmt.Sprintf("/api/v2/genre")
}

// all genre get
func (c *Client) ListGenre(ctx context.Context, path string, keyword *string) (*http.Response, error) {
	req, err := c.NewListGenreRequest(ctx, path, keyword)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListGenreRequest create the request corresponding to the list action endpoint of the genre resource.
func (c *Client) NewListGenreRequest(ctx context.Context, path string, keyword *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if keyword != nil {
		values.Set("keyword", *keyword)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
