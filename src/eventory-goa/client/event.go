// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)/src/github.com/tikasan/eventory-goa
// --version=v1.1.0-dirty
//
// API "eventory": event Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// ListEventPath computes a request path to the list action of event.
func ListEventPath() string {

	return fmt.Sprintf("/api/v2/event")
}

// イベント情報取得(クライントはこの処理の実行した時間を保持する)
func (c *Client) ListEvent(ctx context.Context, path string, updatedAt *string) (*http.Response, error) {
	req, err := c.NewListEventRequest(ctx, path, updatedAt)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEventRequest create the request corresponding to the list action endpoint of the event resource.
func (c *Client) NewListEventRequest(ctx context.Context, path string, updatedAt *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if updatedAt != nil {
		values.Set("updated_at", *updatedAt)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
