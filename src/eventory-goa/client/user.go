// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)/src/github.com/tikasan/eventory-goa
// --version=v1.1.0-dirty
//
// API "eventory": user Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// EventFavUpdateUserPath computes a request path to the event fav update action of user.
func EventFavUpdateUserPath(eventID int) string {
	param0 := strconv.Itoa(eventID)

	return fmt.Sprintf("/api/v2/user/%s/keep", param0)
}

// EventFavUpdateUserPath2 computes a request path to the event fav update action of user.
func EventFavUpdateUserPath2(eventID int) string {
	param0 := strconv.Itoa(eventID)

	return fmt.Sprintf("/api/v2/user/%s/nokeep", param0)
}

// イベントのお気に入り操作
func (c *Client) EventFavUpdateUser(ctx context.Context, path string, userID int) (*http.Response, error) {
	req, err := c.NewEventFavUpdateUserRequest(ctx, path, userID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewEventFavUpdateUserRequest create the request corresponding to the event fav update action endpoint of the user resource.
func (c *Client) NewEventFavUpdateUserRequest(ctx context.Context, path string, userID int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp6 := strconv.Itoa(userID)
	values.Set("userID", tmp6)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GenreFavUpdateUserPath computes a request path to the genre fav update action of user.
func GenreFavUpdateUserPath(genreID int) string {
	param0 := strconv.Itoa(genreID)

	return fmt.Sprintf("/api/v2/user/%s/add", param0)
}

// GenreFavUpdateUserPath2 computes a request path to the genre fav update action of user.
func GenreFavUpdateUserPath2(genreID int) string {
	param0 := strconv.Itoa(genreID)

	return fmt.Sprintf("/api/v2/user/%s/remove", param0)
}

// ジャンルお気に入り操作
func (c *Client) GenreFavUpdateUser(ctx context.Context, path string, userID int) (*http.Response, error) {
	req, err := c.NewGenreFavUpdateUserRequest(ctx, path, userID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGenreFavUpdateUserRequest create the request corresponding to the genre fav update action endpoint of the user resource.
func (c *Client) NewGenreFavUpdateUserRequest(ctx context.Context, path string, userID int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp7 := strconv.Itoa(userID)
	values.Set("userID", tmp7)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
