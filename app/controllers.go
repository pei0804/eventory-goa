// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/tikasan/eventory-goa/design
// --out=$(GOPATH)
// --version=v1.1.0-dirty
//
// API "eventory": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// EventsController is the controller interface for the Events actions.
type EventsController interface {
	goa.Muxer
	KeepEvent(*KeepEventEventsContext) error
	List(*ListEventsContext) error
}

// MountEventsController "mounts" a Events resource controller on the given service.
func MountEventsController(service *goa.Service, ctrl EventsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v2/events/:eventID/keep", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/genre/:id", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/new", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/keep", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/nokeep", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/popular", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/events/recommend", ctrl.MuxHandler("preflight", handleEventsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewKeepEventEventsContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.KeepEvent(rctx)
	}
	h = handleSecurity("key", h)
	h = handleEventsOrigin(h)
	service.Mux.Handle("PUT", "/api/v2/events/:eventID/keep", ctrl.MuxHandler("KeepEvent", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "KeepEvent", "route", "PUT /api/v2/events/:eventID/keep", "security", "key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEventsContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("key", h)
	h = handleEventsOrigin(h)
	service.Mux.Handle("GET", "/api/v2/events/genre/:id", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/genre/:id", "security", "key")
	service.Mux.Handle("GET", "/api/v2/events/new", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/new", "security", "key")
	service.Mux.Handle("GET", "/api/v2/events/keep", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/keep", "security", "key")
	service.Mux.Handle("GET", "/api/v2/events/nokeep", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/nokeep", "security", "key")
	service.Mux.Handle("GET", "/api/v2/events/popular", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/popular", "security", "key")
	service.Mux.Handle("GET", "/api/v2/events/recommend", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Events", "action", "List", "route", "GET /api/v2/events/recommend", "security", "key")
}

// handleEventsOrigin applies the CORS response headers corresponding to the origin.
func handleEventsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// GenresController is the controller interface for the Genres actions.
type GenresController interface {
	goa.Muxer
	Create(*CreateGenresContext) error
	FollowGenre(*FollowGenreGenresContext) error
	List(*ListGenresContext) error
}

// MountGenresController "mounts" a Genres resource controller on the given service.
func MountGenresController(service *goa.Service, ctrl GenresController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v2/genres/new", ctrl.MuxHandler("preflight", handleGenresOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/genres/:genreID/follow", ctrl.MuxHandler("preflight", handleGenresOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/genres", ctrl.MuxHandler("preflight", handleGenresOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateGenresContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("key", h)
	h = handleGenresOrigin(h)
	service.Mux.Handle("POST", "/api/v2/genres/new", ctrl.MuxHandler("Create", h, nil))
	service.LogInfo("mount", "ctrl", "Genres", "action", "Create", "route", "POST /api/v2/genres/new", "security", "key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewFollowGenreGenresContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.FollowGenre(rctx)
	}
	h = handleSecurity("key", h)
	h = handleGenresOrigin(h)
	service.Mux.Handle("PUT", "/api/v2/genres/:genreID/follow", ctrl.MuxHandler("FollowGenre", h, nil))
	service.LogInfo("mount", "ctrl", "Genres", "action", "FollowGenre", "route", "PUT /api/v2/genres/:genreID/follow", "security", "key")
	service.Mux.Handle("DELETE", "/api/v2/genres/:genreID/follow", ctrl.MuxHandler("FollowGenre", h, nil))
	service.LogInfo("mount", "ctrl", "Genres", "action", "FollowGenre", "route", "DELETE /api/v2/genres/:genreID/follow", "security", "key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListGenresContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("key", h)
	h = handleGenresOrigin(h)
	service.Mux.Handle("GET", "/api/v2/genres", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Genres", "action", "List", "route", "GET /api/v2/genres", "security", "key")
}

// handleGenresOrigin applies the CORS response headers corresponding to the origin.
func handleGenresOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// PrefsController is the controller interface for the Prefs actions.
type PrefsController interface {
	goa.Muxer
	PrefFollow(*PrefFollowPrefsContext) error
}

// MountPrefsController "mounts" a Prefs resource controller on the given service.
func MountPrefsController(service *goa.Service, ctrl PrefsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v2/prefs/:prefID/follow", ctrl.MuxHandler("preflight", handlePrefsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPrefFollowPrefsContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.PrefFollow(rctx)
	}
	h = handleSecurity("key", h)
	h = handlePrefsOrigin(h)
	service.Mux.Handle("PUT", "/api/v2/prefs/:prefID/follow", ctrl.MuxHandler("PrefFollow", h, nil))
	service.LogInfo("mount", "ctrl", "Prefs", "action", "PrefFollow", "route", "PUT /api/v2/prefs/:prefID/follow", "security", "key")
	service.Mux.Handle("DELETE", "/api/v2/prefs/:prefID/follow", ctrl.MuxHandler("PrefFollow", h, nil))
	service.LogInfo("mount", "ctrl", "Prefs", "action", "PrefFollow", "route", "DELETE /api/v2/prefs/:prefID/follow", "security", "key")
}

// handlePrefsOrigin applies the CORS response headers corresponding to the origin.
func handlePrefsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// UsersController is the controller interface for the Users actions.
type UsersController interface {
	goa.Muxer
	AccountCreate(*AccountCreateUsersContext) error
	TmpAccountCreate(*TmpAccountCreateUsersContext) error
}

// MountUsersController "mounts" a Users resource controller on the given service.
func MountUsersController(service *goa.Service, ctrl UsersController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v2/users/new", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v2/users/tmp", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAccountCreateUsersContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.AccountCreate(rctx)
	}
	h = handleSecurity("key", h)
	h = handleUsersOrigin(h)
	service.Mux.Handle("POST", "/api/v2/users/new", ctrl.MuxHandler("AccountCreate", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "AccountCreate", "route", "POST /api/v2/users/new", "security", "key")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewTmpAccountCreateUsersContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.TmpAccountCreate(rctx)
	}
	h = handleUsersOrigin(h)
	service.Mux.Handle("POST", "/api/v2/users/tmp", ctrl.MuxHandler("TmpAccountCreate", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "TmpAccountCreate", "route", "POST /api/v2/users/tmp")
}

// handleUsersOrigin applies the CORS response headers corresponding to the origin.
func handleUsersOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
